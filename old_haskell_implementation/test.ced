$the
  #T *
  #x T
  x

$CNat
  @P *
  @Z P
  @S @ P P
  P

$CZ
  #P *
  #Z P
  #S @ P P
  Z

$CS
  #n CNat
  #P *
  #Z P
  #S @ P P
  /S ///n P Z S

$CAdd
  #n CNat
  #m CNat
  #P *
  #Z P
  #S @ P P
  ///n P
    ///m P Z S
    S

$C0
  CZ

$C1
  /CS C0

$C2
  /CS C1

$C3
  /CS C2

$bad
  #T *
  /T T

$C1_eq_C1
  =C1 C1

$C2_eq_C2
  =C2 C2

$C1_refl
  :C1 the

$CBool
  &P *
  @T P
  @F P
  P

$CTrue
  %P *
  #T P
  #F P
  T

$CFalse
  %P *
  #T P
  #F P
  F

$IBool
  #x CBool
  &P @ CBool *
  @T /P CTrue
  @F /P CFalse
  /P x

$ITrue
  %P @ CBool *
  #T /P CTrue
  #F /P CFalse
  T

$IFalse
  %P @ CBool *
  #T /P CTrue
  #F /P CFalse
  F

$Bool
  ^b CBool /IBool b

$True
  |b CTrue /IBool b ITrue

$False
  |b CFalse /IBool b IFalse

$Bool_induction_proof
  @P @ Bool *
  @T /P True
  @F /P False
  @b Bool
  /P b

$Bool_induction
  #P @ Bool *
  #T /P True
  #F /P False
  #b Bool
  $motive
    #b CBool
    @R *
    @r @wit Bool
       @prf /P wit
       @eql =<wit b
       R
    R
  $true_case
    #R *
    #r @wit Bool
       @prf /P wit
       @eql =<wit CTrue
       R
    ///r True T :CTrue the
  $false_case
    #R *
    #r @wit Bool
       @prf /P wit
       @eql =<wit CFalse
       R
    ///r False F :CFalse the
  $tuple
    //\>b
      motive
      true_case
      false_case
  //tuple /P b
    #wit Bool
    #prf /P wit
    #eql =<wit b
    ?b eql /P b prf

//the
  Bool_induction_proof
  Bool_induction
